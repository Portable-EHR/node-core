#!/usr/bin/env node

/*
 * Copyright Â© Portable EHR inc, 2020
 */
/**
 * Created by WebStorm.
 * User: yvesleborg
 * Date: 2016-08-21
 * Time: 5:21 PM
 *
 */

'use strict';

const fileTag = __filename.replace(/(.*\/)(.+?)([.]js)?$/, '$2');

/*
 wherever, however, whenever ... this is started, lets base the process to the /bin folder
 so that all dir references will work in all cases.
*/

const fs       = require('fs');
const log4js   = require('log4js');
const { PEHR_NODE_CWD } = process.env;

process.chdir(PEHR_NODE_CWD);
console.log(`process.chdir(${PEHR_NODE_CWD})`);
process.on('exit',  () => {
    log4js.shutdown()
});

const { makeDirIfNeeded, bailOut } = require('../lib/utils');
const { processPath, NodeName, appVersion, config:{ selfRestServer }, launchParams } = require(PEHR_NODE_CWD+(process.env.PEHR_NODE_LIB_NODE || '/lib/node'));

makeDirIfNeeded(processPath + '/log');

let logger = log4js.getLogger(fileTag+'|'+NodeName);

process.on('unhandledRejection', (reason, promise) => {
    // noinspection JSCheckFunctionSignatures
    logger.error('Unhandled Rejection at:', promise, '\n', Object.entries(promise).map(([key, value])=>`${key}: ${JSON.stringify(value)}`).join('\n'),'\nreason:', reason, '\n', Object.entries(reason).map(([key, value])=>`${key}: ${JSON.stringify(value)}`).join('\n'));
    // Application specific logging, throwing an error, or other logic here
});

logger.error("Starting again at " + new Date());

const nodeNamePad = 20 - NodeName.length;

logger.info("*********************************************************************");
logger.info(`**  ${NodeName}Server starting ${' '.repeat(nodeNamePad)}                           **`);
logger.info("*********************************************************************");
logger.info("[NODE]                Version", process.version);
logger.info("[LOG4JS]              Configuration complete");
logger.info(`[${NodeName}]${' '.repeat(nodeNamePad)}Configuration complete, version :    `, appVersion);

const os      = require('os');
const numcpus = os.cpus().length;
const arch    = os.arch();
logger.info(`[CPUs]                Running on ${numcpus} CPUs, architecture ${arch}`);

const run     = os.platform();
const rel     = os.release();
logger.info(`[OS]                  Platform ${run}, release ${rel}`);

let freemem  = os.freemem() / (1024 * 1024);
freemem      = Number(freemem).toFixed(0);
let totalmem = os.totalmem() / (1024 * 1024);
totalmem     = Number(totalmem).toFixed(0);
logger.info(`[MEM]                 Total ${totalmem} Mb, free ${freemem} Mb`);

const utm = os.uptime();
logger.info(`[UPTIME]              ${utm} s.`);


logger.info(`[EXPRESS]             spawning ...`);

const http   = require('http');
const https  = require('https');
const nodeServerApp = process.env.PEHR_NODE_APP || '/NodeServerApp';
const app    = require(PEHR_NODE_CWD + nodeServerApp);

/**
 * Create HTTP server.
 */
const server = selfRestServer.isSchemeHttp  ?  http.createServer(app)
                                            :  https.createServer({
    key : fs.readFileSync(`${launchParams.instanceResourcesPath}/server.key`),
    cert: fs.readFileSync(`${launchParams.instanceResourcesPath}/server.cert`)
}, app);

/**
 * Event listener for HTTP server "error" event.
 */

server.on('error',  e => {

    logger.error(e.message);

    if (e.syscall !== 'listen') {
        throw e;
    }

    const bind = (typeof port === 'string' ? 'Pipe ' : 'Port ') + port;

    // handle specific listen errors with friendly messages
    switch (e.code) {
        case 'EACCES':
            bailOut(logger, bind + ' requires elevated privileges', e);
            break;
        case 'EADDRINUSE':
            bailOut(logger,bind + ' is already in use', e);
            break;
        default:
            logger.debug('*** error ', e);
            throw e;
    }
});


/**
 * Event listener for HTTP server "listening" event.
 */

server.on('listening', async () => {
    const addr = server.address();
    logger.info(`[SERVER]              listening on port :                      ${addr.port}`);

    try {
        await app.start(logger);
    }
    catch (e) {
        bailOut(logger, `Error in ${nodeServerApp}.start() :`, e);
    }
});

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = port  =>
                                (intPort =>
                                            isNaN(intPort)  ?   (('string' === typeof port)  ?  port  //  a namedPipe ?
                                                                                             :  false)
                                                            :   intPort >= 0  ?  intPort
                                                                              :  false)
                                (parseInt(port));   //  parseInt(80) => 80, parseInt("80") => 80, parseInt("ok") => NaN

/**
 * Get port from config selected by environment and set it in Express, or exit process if invalid.
 */

const port = normalizePort(selfRestServer.port);

if (false === port)  bailOut(logger, `Invalid config selfRestServer.port [${selfRestServer.port}].`);

app.set('port', port);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
